name: SEO CI Pipeline

on:
  push:
    branches: [ main, feat/seo-overhaul ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "seo-ci"
  cancel-in-progress: false

jobs:
  # Lighthouse CI Performance Tests
  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build
        run: npm run build
        
      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x
        
      - name: Start preview server
        run: npm run preview &
        
      - name: Wait for server
        run: npx wait-on http://localhost:4173
        
      - name: Run Lighthouse CI
        run: npx lhci autorun --upload.target=filesystem --upload.outputDir=reports/lhci
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          
      - name: Upload Lighthouse reports
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-reports
          path: reports/lhci/

  # Playwright E2E Tests
  e2e-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install Playwright
        run: npx playwright install --with-deps
        
      - name: Build
        run: npm run build
        
      - name: Run Playwright tests
        run: npx playwright test
        
      - name: Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # SEO Validation
  seo-validation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build
        run: npm run build
        
      - name: Validate Sitemap
        run: |
          node -e "
          const fs = require('fs');
          const sitemap = fs.readFileSync('dist/sitemap.xml', 'utf8');
          console.log('Sitemap generated successfully');
          console.log('Sitemap size:', sitemap.length, 'bytes');
          "
        
      - name: Validate Robots.txt
        run: |
          node -e "
          const fs = require('fs');
          const robots = fs.readFileSync('dist/robots.txt', 'utf8');
          console.log('Robots.txt generated successfully');
          console.log('Contains AI bot rules:', robots.includes('GPTBot'));
          "
        
      - name: Validate LLM Facts
        run: |
          node -e "
          const fs = require('fs');
          const llmFacts = JSON.parse(fs.readFileSync('dist/.well-known/llm-facts.json', 'utf8'));
          console.log('LLM Facts generated successfully');
          console.log('Number of facts:', llmFacts.length);
          console.log('High confidence facts:', llmFacts.filter(f => f.confidence === 'high').length);
          "

  # Bundle Size Check
  bundle-size:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build
        run: npm run build
        
      - name: Check bundle size
        run: |
          node -e "
          const fs = require('fs');
          const path = require('path');
          const distPath = 'dist/assets';
          
          if (fs.existsSync(distPath)) {
            const files = fs.readdirSync(distPath);
            const jsFiles = files.filter(f => f.endsWith('.js'));
            
            let totalSize = 0;
            jsFiles.forEach(file => {
              const filePath = path.join(distPath, file);
              const stats = fs.statSync(filePath);
              totalSize += stats.size;
            });
            
            console.log('Total JS bundle size:', (totalSize / 1024 / 1024).toFixed(2), 'MB');
            
            // Check if main bundle is under 500KB
            const mainBundle = jsFiles.find(f => f.includes('index-'));
            if (mainBundle) {
              const mainSize = fs.statSync(path.join(distPath, mainBundle)).size;
              console.log('Main bundle size:', (mainSize / 1024).toFixed(2), 'KB');
              
              if (mainSize > 500 * 1024) {
                console.error('Main bundle exceeds 500KB limit!');
                process.exit(1);
              }
            }
          }
          "

  # Security Check
  security-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Run security audit
        run: npm audit --audit-level moderate
        
      - name: Check for secrets
        run: |
          if grep -r "sk-" . --exclude-dir=node_modules --exclude-dir=.git; then
            echo "Potential API keys found!"
            exit 1
          fi
